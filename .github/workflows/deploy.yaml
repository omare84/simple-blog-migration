name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 1) SAM build & deploy
      - name: Install SAM CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install aws-sam-cli

      - name: Build SAM
        working-directory: ./
        run: sam build

      - name: Deploy SAM
        working-directory: ./
        run: |
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM

      # ‚Üê Read CF outputs and set REACT_APP_API_URL for frontend build
      - name: Get API Endpoint & export REACT_APP_API_URL
        shell: bash
        run: |
          # prefer stack name from samconfig.toml, otherwise fall back to provided secret or literal
          STACK_NAME=$(grep -Po '(?<=stack_name = ")[^"]+' samconfig.toml 2>/dev/null || echo "${{ secrets.SAM_STACK_NAME }}" || echo "sam-app")
          echo "Using CloudFormation stack: $STACK_NAME"

          API_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text)

          echo "CloudFormation raw ApiEndpoint: $API_ENDPOINT"

          if [ -z "$API_ENDPOINT" ] || [ "$API_ENDPOINT" = "None" ]; then
            echo "ERROR: Could not find ApiEndpoint in CloudFormation outputs for stack $STACK_NAME"
            exit 1
          fi

          REACT_APP_API_URL="${API_ENDPOINT}/api/posts"
          # defensive normalization to avoid double slashes like https://...//api/posts
          REACT_APP_API_URL=${REACT_APP_API_URL//\/\/api/\/api}

          echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> $GITHUB_ENV
          echo "Exported REACT_APP_API_URL"

      # 2) Build & deploy frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend deps
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        env:
          REACT_APP_API_URL: ${{ env.REACT_APP_API_URL }}
        run: |
          cd frontend
          npm run build

      - name: Sync frontend to S3
        run: |
          aws s3 sync frontend/build/ s3://sam-app-frontendbucket-fymhb6hc3zdv --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CF_DISTRIBUTION_ID }} \
            --paths "/*"
